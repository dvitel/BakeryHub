// <auto-generated />
using BakeryHub.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BakeryHub.Domain.Migrations
{
    [DbContext(typeof(BakeryHubContext))]
    [Migration("20171129064446_ProductImage_Changes")]
    partial class ProductImage_Changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BakeryHub.Domain.CardPaymentMethod", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("PaymentMethodId");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StateId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Zip")
                        .HasMaxLength(30);

                    b.HasKey("CustomerId", "PaymentMethodId");

                    b.HasIndex("StateId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("BakeryHub.Domain.CartItem", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("DatePlaced");

                    b.Property<int>("ProductCount");

                    b.Property<int>("ProductId");

                    b.Property<int>("SupplierId");

                    b.HasKey("CustomerId", "ItemId");

                    b.HasIndex("SupplierId", "ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BakeryHub.Domain.CountryState", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Code");

                    b.ToTable("States");
                });

            modelBuilder.Entity("BakeryHub.Domain.Customer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("AddressId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StateId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Zip")
                        .HasMaxLength(30);

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("StateId")
                        .IsUnique()
                        .HasFilter("[StateId] IS NOT NULL");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerContact", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("ContactId");

                    b.Property<string>("Address");

                    b.Property<bool>("IsConfirmed");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("CustomerId", "ContactId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerContactSubscription", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("ContactId");

                    b.Property<int>("Purpose");

                    b.HasKey("CustomerId", "ContactId", "Purpose");

                    b.ToTable("CustomerContactSubscription");
                });

            modelBuilder.Entity("BakeryHub.Domain.Models.Delivery", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("SupplierId");

                    b.Property<int>("CustomerId");

                    b.Property<int>("CustomerAddressId");

                    b.Property<int?>("DeliverySiteId");

                    b.Property<DateTime>("ExpectedDeliveryDate");

                    b.Property<int>("SupplierAddressId");

                    b.HasKey("OrderId", "SupplierId", "CustomerId");

                    b.HasIndex("DeliverySiteId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("CustomerId", "OrderId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("BakeryHub.Domain.Models.DeliverySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("isCompany");

                    b.HasKey("Id");

                    b.ToTable("DeliverySites");
                });

            modelBuilder.Entity("BakeryHub.Domain.Order", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("OrderId");

                    b.Property<DateTime>("DatePlaced");

                    b.Property<decimal>("Price");

                    b.HasKey("CustomerId", "OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BakeryHub.Domain.OrderItem", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("PricePerItem");

                    b.Property<int>("ProductCount");

                    b.HasKey("CustomerId", "OrderId", "ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BakeryHub.Domain.Payment", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("PaymentId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CardPaymentMethodId");

                    b.Property<int>("OrderId");

                    b.Property<int>("Status");

                    b.HasKey("CustomerId", "PaymentId");

                    b.HasIndex("CustomerId", "OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BakeryHub.Domain.Product", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<int>("ProductId");

                    b.Property<int>("AvailableNow");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("Price");

                    b.Property<int?>("SupplierId1");

                    b.HasKey("SupplierId", "ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId1");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BakeryHub.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("BakeryHub.Domain.ProductImage", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<int>("ProductId");

                    b.Property<int>("ImageId");

                    b.Property<string>("LogicalPath");

                    b.Property<string>("Mime");

                    b.Property<string>("Path");

                    b.HasKey("SupplierId", "ProductId", "ImageId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("BakeryHub.Domain.ProductReview", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("CustomerId1");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("Rating");

                    b.HasKey("ProductId", "Date", "CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("CustomerId", "ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("BakeryHub.Domain.Supplier", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("HasLogo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCompany");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierAddress", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<int>("AddressId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StateId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Zip")
                        .HasMaxLength(30);

                    b.Property<bool>("isUIVisible");

                    b.HasKey("SupplierId", "AddressId");

                    b.HasIndex("StateId")
                        .IsUnique()
                        .HasFilter("[StateId] IS NOT NULL");

                    b.ToTable("SupplierAddress");
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierContact", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<int>("ContactId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsUIVisible");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("SupplierId", "ContactId");

                    b.ToTable("SupplierContacts");
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierContactSubscription", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<int>("ContactId");

                    b.Property<int>("Purpose");

                    b.HasKey("SupplierId", "ContactId", "Purpose");

                    b.HasIndex("SupplierId", "ContactId");

                    b.ToTable("SupplierContactSubscription");
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierReview", b =>
                {
                    b.Property<int>("SupplierId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("Rating");

                    b.HasKey("SupplierId", "Date", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SupplierReviews");
                });

            modelBuilder.Entity("BakeryHub.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PasswordEncryptionAlgorithm");

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.HasIndex("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BakeryHub.Domain.CardPaymentMethod", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.CountryState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("BakeryHub.Domain.CartItem", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BakeryHub.Domain.Customer", b =>
                {
                    b.HasOne("BakeryHub.Domain.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BakeryHub.Domain.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerAddress", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.CountryState", "State")
                        .WithOne()
                        .HasForeignKey("BakeryHub.Domain.CustomerAddress", "StateId");
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerContact", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.CustomerContactSubscription", b =>
                {
                    b.HasOne("BakeryHub.Domain.CustomerContact")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.Models.Delivery", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Models.DeliverySite", "DeliverySite")
                        .WithMany()
                        .HasForeignKey("DeliverySiteId");

                    b.HasOne("BakeryHub.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BakeryHub.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("CustomerId", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BakeryHub.Domain.Order", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.OrderItem", b =>
                {
                    b.HasOne("BakeryHub.Domain.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("CustomerId", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.Payment", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Order", "Order")
                        .WithOne()
                        .HasForeignKey("BakeryHub.Domain.Payment", "CustomerId", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BakeryHub.Domain.Product", b =>
                {
                    b.HasOne("BakeryHub.Domain.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId1");
                });

            modelBuilder.Entity("BakeryHub.Domain.ProductImage", b =>
                {
                    b.HasOne("BakeryHub.Domain.Product")
                        .WithMany("Images")
                        .HasForeignKey("SupplierId", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.ProductReview", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BakeryHub.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("BakeryHub.Domain.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BakeryHub.Domain.Supplier", b =>
                {
                    b.HasOne("BakeryHub.Domain.User", "User")
                        .WithOne("Supplier")
                        .HasForeignKey("BakeryHub.Domain.Supplier", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierAddress", b =>
                {
                    b.HasOne("BakeryHub.Domain.CountryState", "State")
                        .WithOne()
                        .HasForeignKey("BakeryHub.Domain.SupplierAddress", "StateId");

                    b.HasOne("BakeryHub.Domain.Supplier")
                        .WithMany("Addresses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierContact", b =>
                {
                    b.HasOne("BakeryHub.Domain.Supplier")
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierContactSubscription", b =>
                {
                    b.HasOne("BakeryHub.Domain.SupplierContact")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SupplierId", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BakeryHub.Domain.SupplierReview", b =>
                {
                    b.HasOne("BakeryHub.Domain.Customer", "Customer")
                        .WithMany("SupplierReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BakeryHub.Domain.Supplier", "Supplier")
                        .WithMany("Reviews")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
